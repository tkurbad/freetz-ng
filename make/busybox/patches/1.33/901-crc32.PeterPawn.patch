--- coreutils/cksum.c
+++ coreutils/cksum.c
@@ -18,9 +18,18 @@
 //kbuild:lib-$(CONFIG_CKSUM) += cksum.o
 
 //usage:#define cksum_trivial_usage
-//usage:       "FILE..."
+//usage:       "[-l] [-p] FILE..."
 //usage:#define cksum_full_usage "\n\n"
 //usage:       "Calculate the CRC32 checksums of FILEs"
+//usage:       "\n      -l      least significant bit first"
+//usage:       "\n      -p      preset the CRC value to all ones"
+//usage:
+//usage:#define cksum_example_usage
+//usage:       "$ echo -n 'The quick brown fox jumps over the lazy dog' | cksum -lp\n"
+//usage:       "1095738169 43\n"
+//usage:       "$ echo -n 'The quick brown fox jumps over the lazy dog' | cksum\n"
+//usage:       "2074844392 43\n"
+
 
 #include "libbb.h"
 #include "common_bufsiz.h"
@@ -30,19 +39,23 @@
 int cksum_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int cksum_main(int argc UNUSED_PARAM, char **argv)
 {
-	uint32_t *crc32_table = crc32_filltable(NULL, 1);
 	int exit_code = EXIT_SUCCESS;
+	int msbfirst = 1;
+	int initones = 0;
+	unsigned opt = 0;
+	uint32_t *crc32_table = NULL;
 
-#if ENABLE_DESKTOP
-	getopt32(argv, ""); /* coreutils 6.9 compat */
+	opt = getopt32(argv, "lp");
 	argv += optind;
-#else
-	argv++;
-#endif
+	if (opt & 1)
+		msbfirst = 0;
+	if (opt & 2)
+		initones = 1;
 
+	crc32_table = crc32_filltable(NULL, msbfirst);
 	setup_common_bufsiz();
 	do {
-		uint32_t crc;
+		uint32_t crc = 0;
 		off_t filesize;
 		int fd = open_or_warn_stdin(*argv ? *argv : bb_msg_standard_input);
 
@@ -51,7 +69,7 @@
 			continue;
 		}
 
-		crc = 0;
+		crc = initones ? 0xFFFFFFFF : 0;
 		filesize = 0;
 #define read_buf bb_common_bufsiz1
 		for (;;) {
@@ -65,12 +83,15 @@
 				fd = -1; /* break flag */
 				t = filesize;
 				bytes_read = 0;
-				while (t != 0) {
+				while (msbfirst && t != 0) {
 					read_buf[bytes_read++] = (uint8_t)t;
 					t >>= 8;
 				}
 			}
-			crc = crc32_block_endian1(crc, read_buf, bytes_read, crc32_table);
+			if (opt & 1)
+				crc = crc32_block_endian0(crc, read_buf, bytes_read, crc32_table);
+			else
+				crc = crc32_block_endian1(crc, read_buf, bytes_read, crc32_table);
 			if (fd < 0)
 				break;
 		}

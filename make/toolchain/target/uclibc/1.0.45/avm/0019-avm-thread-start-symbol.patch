--- libc/sysdeps/linux/arm/clone.S
+++ libc/sysdeps/linux/arm/clone.S
@@ -115,7 +115,7 @@
 	swi	0x0
 	cfi_endproc
 	cmp	r0, #0
-	beq	1f
+	beq	__thread_start
 	pop	{r4, r7}
 	blt	__error
 	IT(t, ne)
@@ -125,9 +125,11 @@
 .fnend
 PSEUDO_END (__clone)
 
-1:
+__thread_start:
 	.fnstart
 	.cantunwind
+	.global __thread_start
+	.type __thread_start,%function
 	@ pick the function arg and call address off the stack and execute
 	ldr	r0, [sp, #4]
 #if defined(__FDPIC__)
@@ -147,6 +149,7 @@
 
 	@ and we are done, passing the return value through r0
 	b	HIDDEN_JUMPTARGET(_exit)
+	.size __thread_start,.-__thread_start
 
 __error:
 	b	__syscall_error
--- libc/sysdeps/linux/i386/clone.S
+++ libc/sysdeps/linux/i386/clone.S
@@ -94,10 +94,12 @@
 
 	test	%eax,%eax
 	jl	__error
-	jz	.Lthread_start
+	jz	__thread_start
 	ret
 
-.Lthread_start:
+__thread_start:
+.global __thread_start
+.type   __thread_start,%function
 	/* Note: %esi is zero.  */
 	movl	%esi,%ebp	/* terminate the stack frame */
 	call	*%ebx
@@ -110,6 +112,7 @@
 	movl	%eax, %ebx
 	movl	$__NR_exit, %eax
 	int	$0x80
+.size __thread_start,.-__thread_start
 
 /* Need to indirect jump to syscall error 
  * or we end up with TEXTREL's
